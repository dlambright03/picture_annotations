[project]
name = "ada-annotator"
version = "0.1.0"
description = "ADA Compliance Image Annotation System - Automatically generate alt-text for images in documents"
readme = "README.md"
requires-python = ">=3.11"
license = { text = "MIT" }
authors = [
    { name = "Your Name", email = "your.email@example.com" }
]
keywords = ["accessibility", "ada", "alt-text", "document-processing", "ai", "semantic-kernel"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Education",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Education",
    "Topic :: Adaptive Technologies",
]

dependencies = [
    # Document Processing
    "python-docx>=1.1.0",
    "pypdf>=3.17.0",
    "python-pptx>=0.6.23",
    "pillow>=10.1.0",

    # AI and Semantic Kernel
    "semantic-kernel>=1.0.0",
    "openai>=1.12.0",
    "azure-identity>=1.15.0",

    # Web Framework (Streamlit)
    "streamlit>=1.31.0",

    # Utilities
    "python-dotenv>=1.0.0",
    "pydantic>=2.6.0",
    "pydantic-settings>=2.1.0",

    # Logging and Monitoring
    "structlog>=24.1.0",
    "rich>=13.7.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=8.0.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.23.0",
    "pytest-mock>=3.12.0",

    # Code Quality
    "black>=24.1.0",
    "ruff>=0.2.0",
    "mypy>=1.8.0",

    # Type Stubs
    "types-Pillow>=10.2.0",

    # Documentation
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.5.0",
]

ocr = [
    # Optional OCR capabilities
    "pytesseract>=0.3.10",
    "azure-cognitiveservices-vision-computervision>=0.9.0",
]

all = [
    "ada-annotator[dev,ocr]",
]

[project.urls]
Homepage = "https://github.com/yourusername/ada-annotator"
Documentation = "https://github.com/yourusername/ada-annotator/docs"
Repository = "https://github.com/yourusername/ada-annotator"
Issues = "https://github.com/yourusername/ada-annotator/issues"

[project.scripts]
annotate = "ada_annotator.cli:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/ada_annotator"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--cov=ada_annotator",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src/ada_annotator"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]

[tool.black]
line-length = 100
target-version = ["py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"tests/**/*.py" = ["ARG"]  # Allow unused arguments in tests

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_equality = true
ignore_missing_imports = false

[[tool.mypy.overrides]]
module = [
    "docx.*",
    "pptx.*",
    "streamlit.*",
]
ignore_missing_imports = true

[tool.ruff.lint.isort]
known-first-party = ["ada_annotator"]
